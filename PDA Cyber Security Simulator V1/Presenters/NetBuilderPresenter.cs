using PDA_Cyber_Security_Simulator_Domain;
using PDA_Cyber_Security_Simulator_DAL.Common;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using PDA_Cyber_Security_Simulator_V1.Views;

namespace PDA_Cyber_Security_Simulator_V1.Presenters
{
    public class NetBuilderPresenter
    {
        private NetBuilder view;
        private UnitOfWork unitOfWork = new UnitOfWork();

        public NetBuilderPresenter(NetBuilder newView)
        {
            view = newView;
            view.RootCrumbClick += ShowHomeView;
            view.CanvasPaint += OnCanvasPaintClick;
            view.CanvasMouseDown += OnCanvasMouseDown;
            view.EnableLineDrawClick += OnEnableLineDrawClick;
            view.BtnSaveClick += OnBtnSaveClick;
            view.BtnClearNetworkClick += OnBtnClearNetworkClick;
        }

        public void OnCanvasPaintClick()
        {
            view.canvas_Paint(view.PaintEventArgs);
        }

        public void OnCanvasMouseDown()
        {
            view.canvas_MouseDown(view.MouseEventArgs);
        }

        public void OnEnableLineDrawClick()
        {
            view.enableLineDraw_MouseClick();
        }

        public void OnBtnSaveClick()
        {
            btnSave_Click();
        }

        public void OnBtnClearNetworkClick()
        {
            view.btnClearNetwork_Click();
        }

        public void ShowHomeView()
        {
            view.ShowHomeView();
        }

        public void btnSave_Click()
        {
            var netName = view.NetName;
            Network network = view.Network;
            Panel canvas = view.Canvas;

            if (string.IsNullOrWhiteSpace(netName))
            {
                MessageBox.Show(view, "ERROR: Empty Network Name");
            }
            else
            {
                MessageBox.Show(view, "Saved");
                //Algorithm for neighbor checking
                for (int i = 0; i < view.ActiveDevices.Count; i++)
                {
                    for (int j = 0; j < view.Pt1.Count; j++)
                    {
                        if (InBounds(view.ActiveDevices[i], view.Pt1[j]))
                        {
                            for (int k = 0; k < view.ActiveDevices.Count; k++)
                            {
                                if (InBounds(view.ActiveDevices[k], view.Pt2[j]))
                                {
                                    Device d1 = (Device)view.ActiveDevices[k].Tag;
                                    Device d2 = (Device)view.ActiveDevices[i].Tag;
                                    d1.Neighbors.Add(d2);
                                    d2.Neighbors.Add(d1);
                                    view.ActiveDevices[k].Tag = d1;
                                    view.ActiveDevices[i].Tag = d2;
                                }
                            }
                        }
                    }
                }

                //Now we want to push these devices into the network
                foreach (Control c in canvas.Controls)
                {
                    if (c is PictureBox)
                    {
                        if (c.Name != "picTrashCan")
                            //Grab the device object from the tag
                            //Push object into device list
                            network.Devices.Add((Device)c.Tag);
                    }
                }

                network.Name = netName;

                //Push network to db
                unitOfWork.NetworkManager.AddNetwork(network);

                //Grab the network Id generated by the DB
                network.Id = unitOfWork.NetworkManager.GetNetworkIdByName(network.Name);

                //assign the network ID to all devices inside the network
                for (int index = 0; index < network.Devices.Count; index++)
                {
                    network.Devices[index].NetworkId = network.Id;
                    unitOfWork.DeviceManager.AddDevice(network.Devices[index]);
                }

                //Get the Ids of the devices, link those Ids to the list of devices in the network, get and link Neighbor device Ids
                var devices = unitOfWork.DeviceManager.GetDevicesByNetworkId(network.Id);
                if(devices.Count == network.Devices.Count)
                {
                    for(int n = 0; n < devices.Count; n++)
                    {
                        network.Devices[n].Id = devices[n].Id;
                        
                        for(int o = 0; o < network.Devices[n].Neighbors.Count; o++)
                        {
                            network.Devices[n].Neighbors[o].Id = unitOfWork.DeviceManager.GetDeviceIdByNameAndNetworkId(network.Devices[n].Neighbors[o].Name, network.Id);
                        }
                    }

                }

                //Push device neighbors into the neighbors table
                for (int l = 0; l < network.Devices.Count; l++)
                {
                    for (int m = 0; m < network.Devices[l].Neighbors.Count; m++)
                    {
                        unitOfWork.NeighborManager.AddNeighbor(network.Devices[l].Id, network.Devices[l].Neighbors[m].Id);
                    }
                }
            }
        }

        private bool InBounds(PictureBox box, Point x)
        {
            //bool inBounds = true;

            //if ((x.X < box.Location.X || x.X > (box.Width + box.Location.X)) && (x.Y < box.Location.Y || x.Y > (box.Height + box.Location.Y)))
            //    inBounds = false;
            bool inBounds = false;

            if (x.X > box.Location.X && x.X < (box.Location.X + box.Width) && x.Y > box.Location.Y && x.Y < (box.Location.Y + box.Height))
                inBounds = true;

            return inBounds;
        }

    }
}
